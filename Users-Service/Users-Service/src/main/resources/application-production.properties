server.port=${PORT:0}
spring.application.name=users-microservice
eureka.client.serviceUrl.defaultZone=http://localhost:8010/eureka
# sometimes we have to disable auto restart of project, so we can set it to false
spring.devtools.restart.enabled=true
# It will generated instance id for multiple instances randomly
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

# H2 Database config
#spring.h2.console.enabled=true
#spring.h2.console.settings.web-allow-others=true

#spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.driverClassName=org.h2.Driver
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=true

# configure gateway ip
gateway.ip=192.168.1.7

# configure jwt token expiration time 1hr expiration time
#token.expiration_time=864000000
token.expiration_time=3600000
#token secret value
token.secret=hfgry463hf746hf573ydh475fhy5739hfgry463hf746hf573ydh475fhy5739hfgry463hf746hf573ydh475fhy5739

# user login URL
login.url.path=/users/login

# bootstrap.properties file configuration
spring.config.import=optional:configserver:http://localhost:8012

# RabbitMQ server config
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# Actuator config
#management.endpoints.web.exposure.include=beans, health, mappings, httpexchanges
management.endpoints.web.exposure.include=*
management.endpoint.health.enabled=true
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true

# MySQL config
spring.datasource.url=jdbc:mysql://localhost:3306/photo_app
spring.datasource.username=root
spring.datasource.password=manager
spring.datasource.driver-class=com.mysql.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# Feign client logging
logging.level.com.photoapp.users.feignclient.AlbumsServiceClient=DEBUG

# Resilience 4j circuit breaker config
resilience4j.circuitbreaker.circuit-breaker-aspect-order=1
resilience4j.circuitbreaker.instances.albums-ws.failure-rate-threshold=50

# So if this property is set to true, it means that this circuit breaker will automatically transition
# from open to half open state and no call is needed to trigger this transition.
# If this property is set to false and then the transition to have open state only happens if a call is made.
resilience4j.circuitbreaker.instances.albums-ws.automatic-transition-from-open-to-half-open-enabled=true

# And because I have configured to wait duration in open state just 10 seconds, then after 10 seconds,
# my circuit breaker will automatically transition from open state to half open state.
resilience4j.circuitbreaker.instances.albums-ws.wait-duration-in-open-state=10s
resilience4j.circuitbreaker.instances.albums-ws.sliding-window-type=count-based

# the size of the sliding window, which is used to record the outcome. One circuit breaker is closed because
# I have configured a failure rate here of 50 percent.
# Then by setting this sliding window size to adjust 2, I see that if 50 percent of two calls fail,
# then the circuit breaker will open.
# And because I have configured to wait duration in open state just 10 seconds, then after 10 seconds,
# my circuit breaker will automatically transition from open state to half open state.
resilience4j.circuitbreaker.instances.albums-ws.sliding-window-size=2

# config for after how many calls cicuit breaker will be in open state
resilience4j.circuitbreaker.instances.albums-ws.minimum-number-of-calls=1

resilience4j.circuitbreaker.instances.albums-ws.event-consumer-buffer-size=10

# Resilience 4j Retry config
resilience4j.retry.retry-aspect-order=2
resilience4j.retry.instances.albums-ws.max-attempts=3
resilience4j.retry.instances.albums-ws.wait-duration=2s
resilience4j.retry.instances.albums-ws.enable-exponential-backoff=true
resilience4j.retry.instances.albums-ws.exponential-backoff-multiplier=5

# Zipkin req tracing config 0.1 is default value it means 1/10 req will be traced.
# To make trace every single req to be traced we can use 1 instead of 0.1
management.tracing.sampling.probability=1
logging.pattern.level=%5p[${spring.application.name}, %X{traceId:-}, %X{spanId:-}]

# Set debug for logger UsersServiceImpl
logging.level.com.photoapp.users.serviceImpl.UsersServiceImpl=DEBUG

# To save log files to local
logging.file.name=users-microservice.log

# Environment profile setup
myapplication.environment=production-profile


